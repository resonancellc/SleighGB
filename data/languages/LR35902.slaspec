define endian = little;

# Variable length instructions, no alignment
define alignment = 1;

# TODO: How should we split up the overall memory space?
# TODO: How should MMIO regions be mapped?
# TODO: Going to skip ROM and RAM banking for a while, as it makes things extremely complicated

define space ram type=ram_space size=2 default;
define space register type=register_space size=1;

define register offset=0 size=1
  [ A F B C D E H L _ _ _ _];

define register offset=0 size=2
  [ AF BC DE HL SP PC ];

define token opbyte (8)
   op0_8 = (0,7);

define token data16 (16)
   imm16 = (0, 15);

# TODO: I don't quite understand what this is doing
addr16: imm16 is imm16 {
    export *:1 imm16;
}

:NOP is op0_8=0x0 {

}

:JP addr16 is op0_8=0xC3; addr16 {
    goto addr16;
}

:CALL addr16 is op0_8=0xCD; addr16 {
    SP = SP - 2;
    *:2 SP = &:2 inst_next;
    call addr16;
}
