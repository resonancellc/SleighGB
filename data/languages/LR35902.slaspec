define endian = little;

# Variable length instructions, no alignment
define alignment = 1;

# TODO: How should we split up the overall memory space?
# TODO: How should MMIO regions be mapped?
# TODO: Going to skip ROM and RAM banking for a while, as it makes things extremely complicated

define space ram type=ram_space size=2 default;
define space register type=register_space size=1;

define register offset=0 size=1
  [ A F B C D E H L _ _ _ _];

define register offset=0 size=2
  [ AF BC DE HL SP PC ];

define token opbyte (8)
   imm8 = (0,7)
   reg0_3 = (0,2)
   reg3_3 = (3,5)
   reg4_2 = (4,5)
   op3_5 = (3,7)
   op6_2 = (6,7)
   op0_4 = (0,3)
   op0_3 = (0,2)
   op0_8 = (0,7);

define token data16 (16)
   imm16 = (0, 15);

attach variables [reg0_3 reg3_3 ] [ B C D E H L _ A ];
attach variables [ reg4_2 ] [ BC DE HL SP ];

# TODO: Should we track this as a "real" reg instead?
define pcodeop enable_interrupts;

define pcodeop halt;

addr16: imm16 is imm16 {
    export *:1 imm16;
}

hiaddr8: imm8 is imm8 {
    ptr:2 = 0xFF00 + imm8;
    export *:1 ptr;
}

:NOP is op0_8=0x0 {

}

:JP addr16 is op0_8=0xC3; addr16 {
    goto addr16;
}

:CALL addr16 is op0_8=0xCD; addr16 {
    SP = SP - 2;
    *:2 SP = &:2 inst_next;
    call addr16;
}

:ADD A,reg0_3 is op3_5=0x10 & reg0_3 & A {
    # TODO: set flags
    A = A + reg0_3;
}

:XOR A,reg0_3 is op3_5=0x15 & reg0_3 & A {
    # TODO: set flags
    A = A ^ reg0_3;
}

:AND A,reg0_3 is op3_5=0x14 & reg0_3 & A {
    # TODO: set flags
    A = A & reg0_3;
}

:LD reg3_3,reg0_3 is op6_2=0x1 & reg3_3 & reg0_3 {
    reg3_3 = reg0_3;
}

:LD SP,imm16 is op0_8=0x31 & SP; imm16 {
    SP = imm16;
}

:LDH hiaddr8,A is op0_8 = 0xE0 & A ; hiaddr8 {
    hiaddr8 = A;
}

:LDH hiaddr8,A is op0_8 = 0xF0 & A ; hiaddr8 {
    A = hiaddr8;
}

:LD reg4_2,imm16 is op6_2 = 0x0 & op0_4 = 0x1 & reg4_2 ; imm16 {
    reg4_2 = imm16;
}

:LD reg3_3,imm8 is op0_3=0x6 & op6_2 = 0x0 & reg3_3 ; imm8 {
    reg3_3 = imm8;
}

:LD addr16,A is op0_8=0xEA & A ; addr16 {
    addr16 = A;
}

:EI is op0_8=0xFB {
    enable_interrupts();
}

:HALT is op0_8=0x76 {
    halt();
}
